@startuml Class Diagram
class User{
  __ private data __
  - id : number
  - email : string
  - password : string
  - data : UserData
  ==
  + User(id : number, email : string, password : string, data : UserData)
  + User(email : string, password : string)
  + getId()
  + getEmail()
  + getPassword()
  + getData()
  + setPassword(newPassword : string)
}
class UserData{
  __ private data __
  - firstName : string
  - lastName : string
  - birthDate : date
  ==
  + UserData(firstName : string, lastName : string, birthDate : date)
  + getfirstName()
  + getlastName()
  + getBirthDate()
  + setfirstName(newFirstName : string)
  + setlastName(NewLastName : string)
  + setBirthDate(NewBirthDate : date)
}

class UsersRole{
  __ private data __
  - userId : number
  - role : Role
  ==
  + UsersRole(userId : number, role : Role)
  + getUserId()
  + getRole()
  + setRole(role : Role)
}
enum Role {
  GENERIC
  VIEWER
  MANAGER
  OWNER
  ADMIN
}

class Place{
__ private data __
- id : number
- name : string
- polyline : GeoPoint[]
- data : PlaceData
==
+ Place(id : number, name : string, polyline : GeoPoint[], data : PlaceData)
+ Place(name : string, polyline : GeoPoint[], data : PlaceData)
+ Place(id : number, name : string, polyline : GeoPoint[])
+ getPlaceId()
+ getName()
+ getPolyline()
+ setName(name : string)
+ setPolyline(polyline : GeoPoint[])
}

class GeoPoint{
__ private data __
- longitude : number
- latitude : number
==
+ GeoPoint(longitude : number, latitude : number)
+ getLongitude()
+ getLatitude()
}

class PlaceData{
__ private data __
- id : number
- address : string
- city : string
- zipcode : string
- state : string
==
+ PlaceData(address : string, city : string, zipcode : string, state : string)
+ PlaceData(id : number, address : string, city : string, zipcode : string, state : string)
+ getId()
+ getAddress()
+ getCity()
+ getZipcode()
+ getState()
+ setAddress(address : string)
+ setCity(city : string)
+ setZipcode(zipcode : string)
+ setState(state : string)
}


class Organization{
  __ private data __
  - ID : integer
  - organizationName : string
  - known : bool
  - places : Place[]
  - description : string
  - usersRole : UsersRole[]
  ==
  + Organization(name : string, known : bool, description : string)
  + Organization(number: id, name : string, known : bool, places : Place[], description : string, usersRole : UsersRole[])
  + getID()
  + getOrganizationName()
  + getKnown()
  + getPlaces()
  + getDescription()
  + setOrganizationName(organizationName : string)
  + setKnown(known : bool)
  + setDescription(description : string)
  + setPlaces(places : Place[])
}

class LoginComponent {
  __ private data __
  - User : user
  ==
  + constructor(auth : AuthenticationService)
  + login()
  + loginError()
}

class environment{
  + apiUrl : string
}
class AuthenticationService {
  __ private data __
  - clientId : number
  ==
  + constructor(http : HttpClient)
  + login(user : User)
  + checkCookie()
  + logout()
  + getToken(code : any)
  + saveToken()
}

class HomePageComponent {
 + constructor(auth : AuthenticationService)
}

class TopBarComponent {
 __ private data __
 - User : user
 ==
 + constructor(auth : AuthenticationService, userService : UserService)
 + getUser()
 + getDate()
 + getTime()
}

class ProfileComponent {
  __ private data __
  - User : user
  ==
  + constructor(auth : AuthenticationService, userService : UserService)
  + getUser()
}

class UserService {
  + constructor()
  + getUser()
}

class ShowOrganizationComponent {
  __ private data __
  - organizations : Organization[]
  ==
  + constructor(auth : AuthenticationService, userService : UserService, organizationService : OrganizationService)
  + getOrganizations( userId : number)
}

class OrganizationRequestComponent {
  + constructor(auth : AuthenticationService, userService : UserService, organizationService : OrganizationService)
  + sendRequest( organization : Organization)
}

class OrganizationService {
 + constructor()
 + getOrganization( userId : number)
 + createOrganization( organization : Organization)
}

class MonitorOrganizationComponent
class ShowEmployeesComponent
class ShowPlacesComponent
class ManagePlacesComponent
class ManageOrganizationsComponent
class ManageUsersComponent

class OrganizationListComponent
class OrganizationListService
class OrganizationDetailsComponent
class OrganizationDetailsService
LoginComponent o-- AuthenticationService
AuthenticationService ..> User
LoginComponent --> User
Organization *-- UsersRole
Organization *-- Place
UsersRole --> Role
Place *-- GeoPoint
Place *-- PlaceData
User *-- UserData
HomePageComponent o-- AuthenticationService
ProfileComponent o-- AuthenticationService
TopBarComponent o-- AuthenticationService
ShowOrganizationComponent o-- AuthenticationService
OrganizationRequestComponent o-- AuthenticationService
TopBarComponent --> User
ProfileComponent --> User
ShowOrganizationComponent --> Organization
ShowOrganizationComponent ..> User
OrganizationRequestComponent ..> Organization
TopBarComponent o-- UserService
ProfileComponent o-- UserService
ShowOrganizationComponent o-- UserService
ShowOrganizationComponent o-- OrganizationService
OrganizationRequestComponent o-- OrganizationService
UserService ..> User
OrganizationService ..> Organization
@enduml

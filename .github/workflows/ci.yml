name: Continuous Integration

# run jobs on any PRs and main branch changes
on:
  pull_request:
  push:
    branches:
      - master

# STEPS EXPLANATIONS

# uses: actions/cache@v1
# with:
#   path: ~/.npm
#   key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
#
# npm cache files are stored in `~/.npm` on Linux/macOS
# the given key changes ONLY when package.json changes

# - name: ...
#   run: npx ng ..
#
# we use npx to run ng, this way it should pick up the angular cli that was installed in the previous step

# TODO find a way to reduce duplication in jobs (the first steps are repeated)
# TODO add coverage job
jobs:
  check-format:
    name: Check files formatting
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        id: cache
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}

      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Install dependencies if needed
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run Prettier
        run: npm run --silent check-format

  lint:
    name: Lint the whole project
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        id: cache
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}

      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Install dependencies if needed
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run ESLint
        run: npm run --silent lint

  run-unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        id: cache
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}

      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Install dependencies if needed
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run karma
        run: npm run --silent test -- --configuration=ci

  run-code-coverage:
    name: Run code coverage
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        id: cache
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}

      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Install dependencies if needed
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run karma
        run: npm run --silent test -- --code-coverage --configuration=ci

  run-system-tests:
    name: Run system tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        id: cache
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}

      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Install dependencies if needed
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      # FIXME how to run in non-interactive mode?
      - name: Run protractor
        run: npm run --silent e2e -- --configuration=ci
